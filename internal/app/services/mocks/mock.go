// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	models "github.com/HeadHardener/tp_lab/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(workerInput models.LogWorkerInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", workerInput)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(workerInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), workerInput)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(accessToken string) (models.WorkerAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(models.WorkerAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accessToken)
}

// MockAdministration is a mock of Administration interface.
type MockAdministration struct {
	ctrl     *gomock.Controller
	recorder *MockAdministrationMockRecorder
}

// MockAdministrationMockRecorder is the mock recorder for MockAdministration.
type MockAdministrationMockRecorder struct {
	mock *MockAdministration
}

// NewMockAdministration creates a new mock instance.
func NewMockAdministration(ctrl *gomock.Controller) *MockAdministration {
	mock := &MockAdministration{ctrl: ctrl}
	mock.recorder = &MockAdministrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdministration) EXPECT() *MockAdministrationMockRecorder {
	return m.recorder
}

// CreateWorker mocks base method.
func (m *MockAdministration) CreateWorker(workerInput models.CreateWorkerInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorker", workerInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorker indicates an expected call of CreateWorker.
func (mr *MockAdministrationMockRecorder) CreateWorker(workerInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockAdministration)(nil).CreateWorker), workerInput)
}

// GetAll mocks base method.
func (m *MockAdministration) GetAll() ([]models.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAdministrationMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAdministration)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockAdministration) GetByID(workerID int) (models.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", workerID)
	ret0, _ := ret[0].(models.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAdministrationMockRecorder) GetByID(workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAdministration)(nil).GetByID), workerID)
}

// UpdateWorker mocks base method.
func (m *MockAdministration) UpdateWorker(workerID int, workerInput models.UpdateWorkerInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorker", workerID, workerInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorker indicates an expected call of UpdateWorker.
func (mr *MockAdministrationMockRecorder) UpdateWorker(workerID, workerInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorker", reflect.TypeOf((*MockAdministration)(nil).UpdateWorker), workerID, workerInput)
}

// MockGSMInterface is a mock of GSMInterface interface.
type MockGSMInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGSMInterfaceMockRecorder
}

// MockGSMInterfaceMockRecorder is the mock recorder for MockGSMInterface.
type MockGSMInterfaceMockRecorder struct {
	mock *MockGSMInterface
}

// NewMockGSMInterface creates a new mock instance.
func NewMockGSMInterface(ctrl *gomock.Controller) *MockGSMInterface {
	mock := &MockGSMInterface{ctrl: ctrl}
	mock.recorder = &MockGSMInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGSMInterface) EXPECT() *MockGSMInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGSMInterface) Create(workerID int, docInput models.CreateDocInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", workerID, docInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGSMInterfaceMockRecorder) Create(workerID, docInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGSMInterface)(nil).Create), workerID, docInput)
}

// Delete mocks base method.
func (m *MockGSMInterface) Delete(docID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", docID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGSMInterfaceMockRecorder) Delete(docID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGSMInterface)(nil).Delete), docID)
}

// GetAll mocks base method.
func (m *MockGSMInterface) GetAll() ([]models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGSMInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGSMInterface)(nil).GetAll))
}

// GetAllWithID mocks base method.
func (m *MockGSMInterface) GetAllWithID(workerID int) ([]models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithID", workerID)
	ret0, _ := ret[0].([]models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithID indicates an expected call of GetAllWithID.
func (mr *MockGSMInterfaceMockRecorder) GetAllWithID(workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithID", reflect.TypeOf((*MockGSMInterface)(nil).GetAllWithID), workerID)
}

// GetByID mocks base method.
func (m *MockGSMInterface) GetByID(docID int) (models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", docID)
	ret0, _ := ret[0].(models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGSMInterfaceMockRecorder) GetByID(docID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGSMInterface)(nil).GetByID), docID)
}

// Update mocks base method.
func (m *MockGSMInterface) Update(docID int, docInput models.UpdateDocInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", docID, docInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGSMInterfaceMockRecorder) Update(docID, docInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGSMInterface)(nil).Update), docID, docInput)
}
